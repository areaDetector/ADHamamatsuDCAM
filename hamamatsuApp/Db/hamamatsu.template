#=================================================================#
# Template file: hamamatsu.template
# Database for the records specific to the simulated detector driver
# Feb. 9, 2024

include "ADBase.template"

# Redefine the color mode choices from ADBase.template to only have those that the hamamatsu
# driver supports.  Keep the same values (xxVL), but change the menu numbers.

record(mbbo, "$(P)$(R)ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "RGB1")
   field(ONVL, "2")
   field(TWST, "RGB2")
   field(TWVL, "3")
   field(THST, "RGB3")
   field(THVL, "4")
   field(FRST, "")
   field(FVST, "")
   field(SXST, "")
   field(SVST, "")
   field(EIST, "")
}

record(mbbi, "$(P)$(R)ColorMode_RBV")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "RGB1")
   field(ONVL, "2")
   field(TWST, "RGB2")
   field(TWVL, "3")
   field(THST, "RGB3")
   field(THVL, "4")
   field(FRST, "")
   field(FVST, "")
   field(SXST, "")
   field(SVST, "")
   field(EIST, "")
}

# TriggerMode has a different meaning in hamamatsu.
# Not to be confused with TriggerSource.
record(mbbo, "$(P)$(R)TriggerMode")
{
   field(DESC, "Trigger mode (see also TriggerSource)")
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(ZRVL, "1")
   field(ZRST, "Normal")
   field(ONVL, "6")
   field(ONST, "Start")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Start")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################################
#hamamatsu specific records
record(bo, "$(P)$(R)HamaRegionReset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HamaRegionReset")
   info(asyn:READBACK, "1")
}

record(mbbo, "$(P)$(R)TriggerSource")
{
   field(PINI, "YES")
   field(DESC, "Trigger source")
   field(DTYP, "asynInt32")
   field(ZRVL, "1")
   field(ZRST, "Internal")
   field(ONVL, "2")
   field(ONST, "External")
   field(TWVL, "3")
   field(TWST, "Software")
   field(THVL, "4")
   field(VAL,  "0")
   field(THST, "Master pulse")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaTriggerSource")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)TriggerSource_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaTriggerSource")
   field(ZRVL, "1")
   field(ZRST, "Internal")
   field(ONVL, "2")
   field(ONST, "External")
   field(TWVL, "3")
   field(TWST, "Software")
   field(THVL, "4")
   field(THST, "Master pulse")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)HamaTriggerActive")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaTriggerActive")
   field(ZRST, "Edge")
   field(ZRVL, "0")
   field(ONST, "Level")
   field(ONVL, "1")
   field(TWST, "Syncreadout")
   field(TWVL, "2")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)HamaTriggerActive_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaTriggerActive")
   field(ZRST, "Edge")
   field(ZRVL, "0")
   field(ONST, "Level")
   field(ONVL, "1")
   field(TWST, "Syncreadout")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)HamaTriggerPolarity")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaTriggerPolarity")
   field(ZRST, "Negative")
   field(ZRVL, "0")
   field(ONST, "Positive")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)HamaTriggerPolarity_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaTriggerPolarity")
   field(ZRST, "Negative")
   field(ZRVL, "0")
   field(ONST, "Positive")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)HamaFireTrigger")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HamaFireTrigger")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)HamaTriggerTimes")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HamaTriggerTimes")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)HamaTriggerTimes_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HamaTriggerTimes")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)HamaTriggerDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HamaTriggerDelay")
   field(PREC, "6")
   info(autosaveFields, "VAL")
}

record(ai, "$(P)$(R)HamaTriggerDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HamaTriggerDelay")
   field(PREC, "6")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)HamaSensorCoolerStatus_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HamaSensorCoolerStatus")
   field(FTVL,  "CHAR")
   field(NELM, "256")
   field(PINI, "YES")
   #field(VAL,  "Start")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)HamaReadoutSpeed")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaReadoutSpeed")
   field(ZRST, "Slowest")
   field(ZRVL, "1")
   field(ONST, "Fastest")
   field(ONVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)HamaReadoutSpeed_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))HamaReadoutSpeed")
   field(ZRST, "Slowest")
   field(ZRVL, "1")
   field(ONST, "Fastest")
   field(ONVL, "2")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(P)$(R)HamaIsAlive_RBV") {
   field(DTYP, "asynInt32")
   field(ZRST, "OFFLINE")
   field(ZRVL, "1")
   field(ONST, "ONLINE")
   field(ONVL, "2")
   field(TWST, "ERROR")
   field(TWVL, "3")
   field(SCAN, "I/O Intr")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DCAM_IDPROP_SYSTEM_ALIVE")
}